{
  "problem_id": "CF_2121F",
  "problem_title": "Yamakasi",
  "problem_url": "https://codeforces.com/contest/2121/problem/F",
  "rating": 1800,
  "correct_solution_verdict": "OK",
  "buggy_solution_verdict": "TIME_LIMIT_EXCEEDED",
  "buggy_solution_passed_tests": 24,
  "correct_solution_submission_id": 333003315,
  "buggy_solution_submission_id": 333003110,
  "bug_category": "Performance,High Constant Factor TLE,Inefficient Data Structure",
  "bug_description_natural_language": "The buggy solution uses `std::unordered_map` within its `countSum` helper function. While `unordered_map` has an average O(1) complexity, it is susceptible to hash collisions, which can degrade its performance to O(N) in the worst case, leading to a Time Limit Exceeded verdict on specific test cases. The correct solution replaces this with a more robust approach using coordinate compression. It gathers all relevant prefix sum values, sorts them to create a compressed value space, and then uses a simple integer array (`std::vector<int> cnt`) for counting. This avoids the overhead and potential worst-case performance of `unordered_map`, ensuring a more consistent and efficient execution time.",
  "correct_solution_file": "solution_correct.cpp",
  "buggy_solution_file": "solution_buggy.cpp",
  "problem_statement_file": "problem_statement.md"
}
